{"version":3,"sources":["store/taskReducerSlice.js","store/store.js","helpers/average.js","components/Table/Footer.jsx","components/Table/Table.jsx","components/Home/Home.jsx","helpers/initialFanc.js","App.jsx","reportWebVitals.js","index.js"],"names":["taskReducerSlice","createSlice","name","initialState","rows","columns","near","cells","reducers","setRows","state","data","payload","setColumns","setNear","setCells","actions","selectColumns","taskReducer","selectNear","selectCells","configureStore","reducer","average","column","Object","values","i","length","sum","j","Math","round","Footer","cell","dispatch","useDispatch","useSelector","cellVal","row","Array","from","map","item","index","className","style","border","Button","variant","color","onClick","cellsHistory","o","random","slice","generateCols","Table","history","useHistory","useState","percent","setPercent","activ","setActiv","nearest","setNearest","id","goBack","result","reduce","elem","flatenned","activOff","transparent","classNameCell","background","flat","sort","x","y","abs","some","currentVal","e","text","split","incrId","incrCells","incrItems","cloneCells","JSON","parse","stringify","incrRows","newCells","averageCells","incr","target","onMouseEnter","textContent","activOn","onMouseLeave","onDelete","Home","React","initColumns","setInitColumns","initRows","setInitRows","initNear","setinitNear","valueError","setError","handleClick","push","newRows","newColumns","initCells","generateCol","initialFanc","console","warn","width","margin","TextField","autoFocus","label","type","minLength","value","onChange","fullWidth","helperText","disabled","App","path","render","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.04864162.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const taskReducerSlice = createSlice({\r\n  name: 'store',\r\n  initialState: {\r\n    rows: 0,\r\n    columns: 0,\r\n    near: 0,\r\n    cells: [],\r\n  },\r\n  reducers: {\r\n    setRows: (state, data) => {\r\n      state.rows = +data.payload;\r\n    },\r\n    setColumns: (state, data) => {\r\n      state.columns = +data.payload;\r\n    },\r\n    setNear: (state, data) => {\r\n      state.near = +data.payload;\r\n    },\r\n    setCells: (state, data) => {\r\n      state.cells = data.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setRows, setColumns, setNear, setCells } = taskReducerSlice.actions;\r\n\r\nexport const selectRows = state => state.taskReducer.rows;\r\nexport const selectColumns = state => state.taskReducer.columns;\r\nexport const selectNear = state => state.taskReducer.near;\r\nexport const selectCells = state => state.taskReducer.cells;\r\n\r\nexport default taskReducerSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport taskReducerSlice from './taskReducerSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n   taskReducer: taskReducerSlice,\r\n  },\r\n});\r\n","export const average = (cells) => {\n    let average = {};\n    if(cells[0]){\n    let column = Object.values(cells[0]);\n    for (let i = 0; i < column.length; i++) {\n      let sum = 0;\n      for (let j = 0; j < cells.length; j++) {\n          sum += cells[j][i];\n      }\n      average[i] = Math.round(sum / cells.length);\n    }\n  }\nreturn average;\n};\n\n","import React from 'react';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { selectColumns, selectCells, setCells } from '../../store/taskReducerSlice';\r\nimport { average } from '../../helpers/average';\r\n\r\nconst min = 100;\r\nconst max = 999;\r\n\r\n  const Footer = ({ cell }) => {\r\n    const dispatch = useDispatch();\r\n    const cells = useSelector(selectCells);\r\n    const columns = useSelector(selectColumns);\r\n\r\n    const generateCols = () => {\r\n      let cellsHistory = [...cells];\r\n      let o = {};\r\n    for (let i = 0; i < columns; i++) {\r\n      o[i] = Math.round(min + Math.random() * (max - min));\r\n    }\r\n    cellsHistory = [...cellsHistory.slice(0, -1), o];\r\n\r\n    dispatch(setCells([...cellsHistory, average(cellsHistory)]));\r\n    }\r\n\r\n    let cellVal = Object.values(cell);\r\n    const row = Array.from({length: columns}).map((item, index) => {\r\n      return <td key={index}>{cellVal[index]}</td>;\r\n    });\r\n\r\n    const tdStyle = {border: 'none'};\r\n\r\n    return cellVal[0] ? (\r\n      <tr>\r\n        {row}\r\n        <td></td>\r\n        <td className=\"tableEnd\" style={tdStyle}>\r\n        <Button className=\"add\" variant=\"contained\" color=\"primary\" onClick={() => generateCols()}>\r\n        Add\r\n      </Button>\r\n        </td>\r\n      </tr>\r\n    ) : null;\r\n  }\r\n\r\nexport default Footer;\r\n","import React, { useState } from 'react';\r\nimport './table.css';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { selectCells, selectColumns, selectNear, setCells  } from '../../store/taskReducerSlice';\r\nimport Footer from \"./Footer\";\r\nimport { average } from '../../helpers/average';\r\n\r\nconst Table = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const cells = useSelector(selectCells);\r\n\r\n  const history = useHistory();\r\n\r\n  const [percent, setPercent] = useState('');\r\n  const [activ, setActiv] = useState('');\r\n  const [nearest, setNearest] = useState('');\r\n  const columns = useSelector(selectColumns);\r\n  const near = useSelector(selectNear);\r\n\r\n  const onDelete = (id) => {\r\n    let newCells = [\r\n    ...cells.slice(0, +id), ...cells.slice(+id + 1),\r\n    ];\r\n    newCells = [...newCells.slice(0, -1)];\r\n\r\n    const averageCells = average(newCells);\r\n    dispatch(setCells([...newCells, averageCells]));\r\n    };\r\n\r\n    const incr = (text) => {\r\n      let id = text.split('c')[0];\r\n      let incrId = +text.split('c')[1];\r\n      let incrCells = [\r\n        ...cells.slice(+id, +id + 1)\r\n       ];\r\n\r\n      let incrItems = {};\r\n      function incrRows(cells){\r\n        const cloneCells = JSON.parse(JSON.stringify(cells));\r\n        if(cloneCells[0]){\r\n        let column = Object.values(cloneCells[0]);\r\n        for (let i = 0; i < column.length; i++) {\r\n          if (i === incrId) {\r\n            ++cloneCells[0][incrId]\r\n          }\r\n          incrItems[i] = cloneCells[0][i];\r\n        }\r\n       }\r\n      }\r\n      incrRows(incrCells);\r\n\r\n      let newCells = [\r\n       ...cells.slice(0, +id), incrItems, ...cells.slice(+id + 1),\r\n      ];\r\n      newCells = [...newCells.slice(0, -1)];\r\n\r\n      const averageCells = average(newCells);\r\n      dispatch(setCells([...newCells, averageCells]));\r\n    };\r\n\r\n\r\n  const renderCell = (cell, i) => {\r\n    let cellVal = Object.values(cell);\r\n    let result = cellVal.reduce(function(sum, elem) {\r\n      return sum + elem;\r\n    }, 0);\r\n\r\n    let flatenned = [];\r\n    if(cells[0]){\r\n    for(let i = 0; i < cells.length - 1; i++) {\r\n      flatenned[i] = Object.values(cells[i]);\r\n     }\r\n    }\r\n    function hoverOn(id) {\r\n      if(id === (i + 'r')){\r\n        setPercent(i + 'r');\r\n      }\r\n    }\r\n    function hoverOff() {\r\n      setPercent('');\r\n    }\r\n    function activOn(e) {\r\n      setNearest(e.textContent);\r\n      setActiv('activ');\r\n    }\r\n    function activOff() {\r\n      setActiv('');\r\n    }\r\n    const row = Array.from({length: columns}).map((item, index) => {\r\n      const color = `red ${1 +'%'}`;\r\n      const transparent = Math.round((cellVal[index]/result) * 100);\r\n      const classNameCell = activ;\r\n      return(\r\n  (percent === i + 'r') ? (\r\n  <td style={{background: `linear-gradient(to bottom, Transparent ${100 - transparent}%, ${color})`}}\r\n  key={index}>{transparent +'%'}</td>)\r\n : (<td key={index}\r\n   id={i + 'c' + index} className= {(flatenned.flat().sort((x, y) => Math.abs(+nearest - x)\r\n  - Math.abs(+nearest - y)).slice(0, near).some(currentVal => currentVal === cellVal[index]))\r\n   ? (classNameCell) : ''}\r\n   onClick={(e) => incr(e.target.id)}\r\n  onMouseEnter={(e) => activOn(e.target)}\r\n  onMouseLeave={activOff}>{cellVal[index]}</td>)\r\n      )\r\n    });\r\n    return(\r\n      <tr key={i}>\r\n        {row}\r\n        <td id={i + 'r'} className=\"tableRes\"\r\n       onMouseEnter={(e) => hoverOn(e.target.id)}\r\n       onMouseLeave={hoverOff}>\r\n         {result}</td>\r\n         <td className=\"tableEnd\">\r\n         <Button variant=\"contained\" color=\"secondary\"\r\n       id={i} onClick={() => onDelete(i)}>Delete</Button>\r\n        </td>\r\n      </tr>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"table-wrap\">\r\n      <span id=\"goBack-btn\">\r\n      <Button variant=\"contained\" color=\"primary\" onClick={history.goBack}>Back</Button>\r\n      </span>\r\n      <span>\r\n        <table className=\"Mtable\" aria-label=\"simple table\">\r\n          <tbody>\r\n          {[...cells.slice(0, -1)].map(\r\n              renderCell\r\n            )}\r\n          </tbody>\r\n            <tfoot>\r\n            {[...cells.slice(-1)].map((cell, i) =>\r\n              <Footer key={i} cell={cell} />\r\n            )}\r\n            </tfoot>\r\n        </table>\r\n      </span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import React from \"react\";\r\nimport { useDispatch } from 'react-redux';\r\nimport { setRows, setColumns, setNear, setCells } from '../../store/taskReducerSlice';\r\nimport {initialFanc} from '../../helpers/initialFanc';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Home = () => {\r\n  const [initColumns, setInitColumns] = React.useState(5);\r\n  const [initRows, setInitRows] = React.useState(5);\r\n  const [initNear, setinitNear] = React.useState(5);\r\n  const [valueError, setError] = React.useState('');\r\n  const dispatch = useDispatch();\r\n  let history = useHistory();\r\n\r\n  const handleClick = () => {\r\n    if(initRows > 0 && initColumns > 0 && initNear > 0){\r\n      history.push('/table');\r\n      dispatch(setRows(initRows));\r\n      dispatch(setColumns(initColumns));\r\n      dispatch(setNear(initNear));\r\n      const initFn = () => initialFanc(initRows, initColumns);\r\n      dispatch(setCells(initFn()));\r\n    } else {\r\n      console.warn('value <= 0');\r\n      setError('enter value > 0');\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"home\">\r\n      <div className=\"creat-wrap\">\r\n        <div className=\"input-wrap\">\r\n        <form className=\"demoForm\" style={{ width: '30%', margin: 'auto' }}>\r\n                <TextField\r\n                  autoFocus\r\n                  margin=\"dense\"\r\n                  id=\"columns\"\r\n                  label=\"columns\"\r\n                  type=\"number\"\r\n                  minLength=\"1\"\r\n                  value={initColumns}\r\n                  onChange={e => setInitColumns(e.target.value)}\r\n                  fullWidth\r\n                />\r\n                <TextField\r\n                  margin=\"dense\"\r\n                  id=\"rows\"\r\n                  label=\"rows\"\r\n                  type=\"number\"\r\n                  minLength=\"1\"\r\n                  value={initRows}\r\n                  onChange={e => setInitRows(e.target.value)}\r\n                  fullWidth\r\n                />\r\n                <TextField\r\n                  margin=\"dense\"\r\n                  id=\"near\"\r\n                  label=\"near\"\r\n                  type=\"number\"\r\n                  minLength=\"1\"\r\n                  value={initNear}\r\n                  onChange={e => setinitNear(e.target.value)}\r\n                  fullWidth\r\n                  helperText={valueError}\r\n                />\r\n\r\n                <Button disabled={!initColumns || !initRows || !initNear} onClick={() => handleClick(history)}\r\n                 variant=\"contained\" color=\"primary\"  className='buttonAdd'>\r\n                Add New Table\r\n                </Button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import {average} from './average';\r\nconst min = 100;\r\nconst max = 999;\r\n\r\nexport function initialFanc(newRows, newColumns) {\r\n    let initCells = [];\r\n    const generateCol = () => {\r\n      let o = {};\r\n      for (let i = 0; i < newColumns; i++) {\r\n        if(newColumns) {\r\n        o[i] = Math.round(min + Math.random() * (max - min));\r\n      }\r\n      }\r\n      initCells.push(o)\r\n      }\r\n    for (let j = 0; j < newRows; j++) {\r\n      generateCol()\r\n    }\r\n    const averageCells = average(initCells);\r\n    return [...initCells, averageCells];\r\n}","import React from \"react\";\nimport {BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Table from './components/Table/Table';\nimport Home from './components/Home/Home';\nimport './App.css';\n\nfunction App() {\n\n  return (\n    <>\n    <div className=\"container\">\n      </div>\n       <Router>\n       <Switch>\n       <Route path=\"/table\" render={() => <Table/>} />\n        <Route exact path=\"/\"><Home /></Route>\n      </Switch>\n </Router>\n</>\n);\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store/store'\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}